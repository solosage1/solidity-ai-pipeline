diff --git a/README.md b/README.md
index 00217af..a38f710 100644
--- a/README.md
+++ b/README.md
@@ -25,6 +25,11 @@ make solai-run
 - Slither
 - SWE-Agent and SWE-ReX
 
+## Docker RAM Requirements
+
+**Docker RAM** â€“ Foundry + SWE-Agent require ~6 GB.  
+Docker Desktop â†’ Settings â†’ Resources â†’ Memory â‰¥ 6 GB.
+
 ## Implementation Details
 
 For a detailed summary of the Phase 1 implementation (v0.4.0), please refer to the document in the specs directory:
diff --git a/pyproject.toml b/pyproject.toml
index 6bfb613..276f07a 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -4,7 +4,7 @@ build-backend = "hatchling.build"
 
 [project]
 name            = "solai"
-version         = "0.4.0"
+version         = "0.4.1"
 description     = "Plug-and-play AI improvement pipeline for Solidity projects"
 readme          = "README.md"
 requires-python = ">=3.12"
@@ -13,7 +13,9 @@ authors         = [{name = "SoloLabs"}]
 dependencies    = [
   "typer>=0.12",
   "rich>=13",
-  "pyyaml>=6"
+  "pyyaml>=6",
+  "sweagent>=1.0.0",
+  "swe-rex>=1.0.0"
 ]
 
 [project.scripts]
diff --git a/src/solai/cli.py b/src/solai/cli.py
index cb02a10..b20805e 100644
--- a/src/solai/cli.py
+++ b/src/solai/cli.py
@@ -34,10 +34,12 @@ def init(update: bool = typer.Option(False, "-u", "--update",
 # ----- run ---------------------------------------------------
 @app.command()
 def run(config: Path = Path(".solai.yaml"),
-        once: bool = typer.Option(True, help="Exit after backlog drains"),
-        max_concurrency: int = typer.Option(4)):
+        once: bool = typer.Option(False, "--once/--watch",
+                                  help="Exit after one backlog pass"),
+        max_concurrency: int = typer.Option(4),
+        log_file: Path = typer.Option(".solai/logs/run.log")):
     """Run backlog tasks."""
-    run_backlog(config, once, max_concurrency)
+    run_backlog(config, once, max_concurrency, log_file)
 
 # ----- doctor -----------------------------------------------
 @app.command()
@@ -45,5 +47,11 @@ def doctor():
     """Environment self-test."""
     run_doctor()
 
+@app.command("image-rebuild")
+def image_rebuild():
+    """Rebuild & push foundry_sol image, update digest in .solai.yaml."""
+    from solai.runner import rebuild_image
+    rebuild_image()
+
 if __name__ == "__main__":
     app() 
\ No newline at end of file
diff --git a/src/solai/runner.py b/src/solai/runner.py
index ee69e89..0c32ab3 100644
--- a/src/solai/runner.py
+++ b/src/solai/runner.py
@@ -1,67 +1,119 @@
-import subprocess, sys, json, os, importlib
+import subprocess, sys, yaml, shutil, tempfile, platform, re, time, os, contextlib
 from pathlib import Path
 from concurrent.futures import ThreadPoolExecutor
 
-# ------------ doctor ----------------------------------------
-def _check(cmd: str, name: str):
-    try:
-        subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
-        print(f"âœ“ {name}")
-    except subprocess.CalledProcessError as e:
-        print(f"âœ— {name} not found")
-        if "docker build" in cmd:
-            print("\nDocker build failed. Check:\n- Network connectivity\n- Docker daemon running\n- Build logs above")
-        sys.exit(1)
-
-def _check_python_package(package: str):
-    try:
-        importlib.import_module(package)
-        print(f"âœ“ {package} importable")
-    except ImportError:
-        print(f"âœ— {package} not installed")
-        sys.exit(1)
-
-def image_present(tag: str) -> bool:
-    import json, subprocess
-    out = subprocess.check_output(f"docker images --format '{{{{json .}}}}' {tag}",
-                                  shell=True).decode().strip()
+# â”€â”€ helpers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
+def _run(cmd, cwd, log):
+    """Run cmd streaming to console & optional log."""
+    p = subprocess.Popen(cmd, cwd=cwd, text=True,
+                         stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
+    for line in p.stdout:
+        print(line, end="")
+        if log: log.write(line)
+    p.wait()
+    if p.returncode:
+        raise subprocess.CalledProcessError(p.returncode, cmd)
+
+def image_present(digest: str) -> bool:
+    out = subprocess.check_output(
+        f"docker images --no-trunc --format '{{{{.Digest}}}}' {digest}",
+        shell=True, text=True).strip()
     return bool(out)
 
+# â”€â”€ doctor â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 def doctor():
     if sys.version_info < (3, 12):
-        print("âœ— Python 3.12+ required")
-        sys.exit(1)
+        print("âœ— Python 3.12+ required"); sys.exit(1)
+    if platform.system() == "Windows":
+        print("â„¹  Windows detected â€“ run solai inside WSL2 for best results")
 
-    # Basic CLI tools
     checks = [
-        ("pipx --version", "pipx available"),
-        ("docker --version", "Docker CLI"),
-        ("docker info --format '{{.ServerVersion}}'", "Docker engine running"),
-        ("forge --version", "Foundry"),
-        ("slither --version", "Slither")
+      ("pipx --version", "pipx available"),
+      ("docker --version", "Docker CLI"),
+      ("docker info --format '{{.ServerVersion}}'", "Docker engine"),
+      ("forge --version", "Foundry"),
+      ("slither --version", "Slither"),
+      ("sweagent --version", "SWE-Agent"),
+      ("swe-rex --version", "SWE-ReX"),
     ]
     for cmd, name in checks:
-        _check(cmd, name)
-
-    # Docker image
-    img = "foundry_sol"
-    tag = "0.4.0"
-    if not image_present(f"{img}:{tag}"):
-        dockerfile = str(Path(__file__).parent / "docker" / "foundry_sol.Dockerfile")
-        try:
-            subprocess.run(["docker", "build", "-t", f"{img}:{tag}", "-f", dockerfile, "."], check=True)
-        except subprocess.CalledProcessError as e:
-            print("\nDocker build failed. Check:\n- Network connectivity\n- Docker daemon running\n- Build logs above")
-            sys.exit(1)
+        subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
+        print(f"âœ“ {name}")
+
+    cfg = Path(".solai.yaml")
+    if cfg.exists():
+        digest = yaml.safe_load(cfg.read_text())["env"]["docker_image"]
+        if not image_present(digest):
+            print("âœ— Image digest missing â€“ run `solai image-rebuild`"); sys.exit(1)
 
     print("ðŸš€  doctor finished â€“ environment ready")
 
-# ------------ backlog runner (placeholder) -------------------
-def run_backlog(config_path: Path, once: bool, max_concurrency: int):
-    if not config_path.exists():
-        print("Config", config_path, "not found"); sys.exit(1)
-    
-    with ThreadPoolExecutor(max_workers=max_concurrency) as executor:
-        print(f"âš™  Starting backlog runner with {max_concurrency} workers")
+# â”€â”€ image rebuild helper â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
+def rebuild_image():
+    img_tag = "foundry_sol:0.4.1"
+    here = Path(__file__).parent / "docker" / "foundry_sol.Dockerfile"
+    subprocess.run(["docker", "build", "-t", img_tag, "-f", str(here), "."],
+                   check=True)
+    digest = subprocess.check_output(
+        f"docker inspect --format '{{{{index .RepoDigests 0}}}}' {img_tag}",
+        shell=True, text=True).strip()
+    subprocess.run(["docker", "push", digest], check=True)
+    print("âœ“ image pushed:", digest)
+    print("â†’ Update .solai.yaml with the new digest")
+
+# â”€â”€ backlog runner â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
+def run_backlog(cfg_path: Path, once: bool, max_conc: int, log_path: Path):
+    cfg = yaml.safe_load(cfg_path.read_text())
+    model = cfg["agent"]["model"]
+    if not re.match(r"[a-z0-9\-]+-\d{4}-\d{2}-\d{2}", model):
+        print("Model string must pin date (e.g., gpt4o-2025-04-25)"); return
+
+    def _worker():
+        with tempfile.TemporaryDirectory(prefix="solai-") as tmp, \
+             open(log_path, "a") as log:
+            repo_dir = Path(tmp) / "repo"
+            _run(["git", "clone", ".", repo_dir], Path("."), log)
+            _run(["git", "-C", repo_dir, "checkout", "-b", cfg["task"]["branch"]],
+                 Path("."), log)
+
+            # Write SWE-Agent config
+            (repo_dir / "swe.yaml").write_text(f"""
+open_pr: false
+apply_patch_locally: true
+problem_statement:
+  repo_path: .
+  text: "{cfg['agent']['repo_prompt']}"
+env:
+  deployment:
+    image: {cfg['env']['docker_image']}
+""")
+
+            # Run SWE-Agent inside swe-rex
+            _run(["swe-rex", "run", "--image", cfg["env"]["docker_image"],
+                  "--", "sweagent", "run", "--config", "swe.yaml",
+                  "--output-tar", "patch.tar"], repo_dir, log)
+
+            if not (repo_dir / "patch.tar").exists():
+                print("No patch produced"); return
+
+            _run(["tar", "-xf", "patch.tar", "-C", "."], repo_dir, log)
+            diff = next(repo_dir.glob("*.diff"))
+            stat = subprocess.check_output(f"git apply --stat {diff}", shell=True,
+                                           cwd=repo_dir, text=True)
+            loc = sum(map(int, re.findall(r'(\d+) insert', stat)))
+            if loc == 0 or loc > 2000:
+                print("Patch size invalid"); return
+
+            _run(["git", "apply", str(diff)], repo_dir, log)
+            test_res = subprocess.run(["forge", "test", "-q"], cwd=repo_dir)
+            if test_res.returncode:
+                print("Tests still failing"); return
+
+            print(f"ðŸŽ‰  SWE-Agent applied {loc} LOC; tests green")
+
+    while True:
+        with ThreadPoolExecutor(max_workers=max_conc) as pool:
+            pool.submit(_worker).result()
         if once:
-            print("Will exit after backlog drains") 
\ No newline at end of file
+            break
+        time.sleep(30) 
\ No newline at end of file
diff --git a/src/solai/templates/dot_solai.yaml b/src/solai/templates/dot_solai.yaml
index b247b3d..ad7eb9e 100644
--- a/src/solai/templates/dot_solai.yaml
+++ b/src/solai/templates/dot_solai.yaml
@@ -1,9 +1,18 @@
 agent:
-  model: gpt4o
+  model: gpt4o-2025-04-25      # pin to dated model
   usd_cap: 5
+  repo_prompt: "Fix failing tests"
+
 env:
-  docker_image: foundry_sol:0.4.0
-  post_startup_cmds: ["forge test -q"]
+  docker_image: "ghcr.io/yourorg/foundry_sol@sha256:placeholder_digest"
+  post_startup_cmds:
+    - ["forge", "test", "-q"]
+
+task:
+  branch: fix-demo
+  max_attempts: 1
+
+worktrees_dir: .solai/worktrees
+
 backlog:
-  file: backlog.yaml
-worktrees_dir: .solai/worktrees 
\ No newline at end of file
+  file: backlog.yaml 
\ No newline at end of file
