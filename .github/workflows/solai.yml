name: solai-phase3-hello-world
on: [push]

defaults:
  run:
    shell: bash

env:
  DEBUG: "false"  # default debug flag for SWE-agent steps

jobs:
  lint-workflow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check workflow files
        uses: docker://rhysd/actionlint:latest

  phase3_hello_world:
    needs: lint-workflow
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      # Define FOUNDRY_DIR at job level for use in cache and install steps
      FOUNDRY_DIR: /home/runner/.config/.foundry

    steps:
      # → Cache Python deps
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-py3.12
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-
            ${{ runner.os }}-pip-

      # 1) Grab your code
      - uses: actions/checkout@v4

      # 2) Ensure Python 3.12
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      # Export runner's interpreter path for root
      - name: Export PYBIN_DIR
        run: echo "PYBIN_DIR=$(python -c 'import sys, pathlib; print(pathlib.Path(sys.executable).parent)')" >> $GITHUB_ENV

      # Upgrade pip once at the beginning
      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      # 3) Install build tool + build your wheel
      - name: Install build tooling
        run: |
          python -m pip install build
      - name: Build wheel
        run: python -m build

      # 4) Install your wheel + AI backends via pip
      - name: Install solai wheel
        run: |
          wheel=$(ls dist/solai-*.whl)
          echo "Installing wheel: $wheel"
          # Don't install [ai] extras since we're installing SWE-agent directly
          python -m pip install --quiet "${wheel}"

      # Centralize PyYAML install for syntax checking later
      - name: Install PyYAML
        run: python -m pip install --quiet pyyaml

      # -------------------------------------------------------------
      # 4b) Determine latest Foundry version (does NOT need Foundry)
      # -------------------------------------------------------------
      - name: Lock Foundry version to v1.6.5
        id: foundry_version
        run: echo "version=v1.6.5" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------------
      # 4c) Restore Foundry from cache (if we already built it once)
      # -------------------------------------------------------------
      - name: Cache Foundry directory
        id: cache-foundry
        uses: actions/cache@v4
        with:
          path: ${{ env.FOUNDRY_DIR }}
          key: ${{ runner.os }}-foundry-${{ steps.foundry_version.outputs.version }}

      - name: Restore Foundry from cache
        if: steps.cache-foundry.outputs.cache-hit == 'true'
        run: |
          echo "${FOUNDRY_DIR}/bin" >> "$GITHUB_PATH"
          export PATH="${FOUNDRY_DIR}/bin:$PATH"
          forge --version

      # -------------------------------------------------------------
      # 4d) Install Foundry (ONLY if cache missed)
      # -------------------------------------------------------------
      - name: Install Foundry
        if: steps.cache-foundry.outputs.cache-hit != 'true'
        run: |
          # 1) Create Foundry directory
          mkdir -p "${FOUNDRY_DIR}/bin"
          # 2) Download foundryup directly into the standard dir
          curl -L https://raw.githubusercontent.com/foundry-rs/foundry/master/foundryup/foundryup \
               -o "${FOUNDRY_DIR}/bin/foundryup"
          # 3) Make executable
          chmod +x "${FOUNDRY_DIR}/bin/foundryup"
          # 4) Add to temp PATH
          export PATH="${FOUNDRY_DIR}/bin:$PATH"
          # 5) Install full suite
          foundryup || echo "foundryup command failed with exit code $?"
          # 6) Verify
          ls -la "${FOUNDRY_DIR}/bin/forge"
          # 7) Persist correct path
          echo "${FOUNDRY_DIR}/bin" >> "$GITHUB_PATH"
          # 8) Verify again
          export PATH="${FOUNDRY_DIR}/bin:$PATH"
          which forge
          forge --version

      # Debug: Post Docker PATH
      - name: Debug - Post Docker PATH
        if: ${{ env.DEBUG == 'true' }}
        run: |
          echo "PATH after Docker setup: $PATH"
          cat "$GITHUB_PATH"
          # skip redundant Foundry install if cache hit
          if [[ "${{ steps.cache-foundry.outputs.cache-hit }}" == 'true' ]]; then
            echo "Foundry cache hit – skipping binary path export"
          else
            which forge || echo "forge not found in PATH"
          fi

      # 4e) Install SWE-Agent & SWE-ReX
      - name: Install SWE-Agent & SWE-ReX
        run: |
          python -m pip install --quiet --no-cache-dir \
            "git+https://github.com/swe-agent/swe-agent@v1.0.1" \
            "swe-rex==1.2.1" \
            "openai==1.76.0"  # pin exact patch release for determinism

          # Quick import smoke-test
          python -c 'import sweagent; print("import ok:", sweagent.__version__)'

          # Create stubs & minimal config
          python scripts/setup_stub_pkgs.py
          # Fail if helper missing
          test -f scripts/setup_stub_pkgs.py || (echo "scripts/setup_stub_pkgs.py missing"; exit 1)

          which sweagent || { echo "❌ sweagent CLI not in PATH"; exit 1; }

      # 7) Run Phase 3 Hello-World Test
      - name: Phase 3 - SWE-Agent Run  # single sudo, stripped user-site path
        id: swe_agent_run_step
        env:
          PYBIN_DIR: ${{ env.PYBIN_DIR }}
        shell: sudo -E env "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" bash {0}
        run: |
          set -euo pipefail
          # Foundry ▸ recorded python-bin ▸ rest
          export PATH="$FOUNDRY_DIR/bin:${PYBIN_DIR}:$PATH"

          # Early check that sweagent is visible to root
          which sweagent || { echo "❌ sweagent not found in root PATH"; exit 1; }

          # Mini smoke-test (catches import errors sooner)
          sweagent --version

          # 1️⃣ Create isolated failing demo repo
          cd /tmp && rm -rf demo && mkdir demo && cd demo
          git init -q

          cat > Greeter.sol << 'SOL'
          pragma solidity ^0.8.26;
          contract Greeter {
              string private greeting = "hello";
              function greet() external view returns (string memory) {
                  return greeting;
              }
          }
          SOL

          # align heredoc indentation
          cat > Greeter.t.sol << 'SOLTEST'
          pragma solidity ^0.8.26;
          import "forge-std/Test.sol";
          import "./Greeter.sol";

          contract GreeterTest is Test {
              Greeter g;
              function setUp() public { g = new Greeter(); }
              /// @notice Wrong on purpose
              function testGreetingFails() public {
                  assertEq(g.greet(), "HELLO");
              }
          }
          SOLTEST

          # Expect failure – baseline should be red.
          if forge test -q 2>/dev/null; then
            printf '%s\n' '❌ tests unexpectedly green'
            exit 1
          else
            printf '%s\n' '✓ baseline red (silenced warning)'
          fi

          if ! grep -q '"HELLO"' Greeter.t.sol; then
            printf '%s\n' '❌ HELLO literal missing'
            exit 1
          fi
          printf '%s\n' '✓ Checkpoint 1 Passed'

          printf '%s\n' '--- 2️⃣ Creating minimal valid swe.yaml ---'
          cat > swe.yaml << 'YAML'
          problem_statement:
            text: "Fix failing tests"

          agent:
            model:
              name: gpt-4o-mini
              per_instance_cost_limit: 0.20  # Correct field per SWE-Agent v1.0.1
            action_sampler: {}

          env:
            repo:
              path: .
            deployment:
              type: local

          actions:
            open_pr: false
            apply_patch_locally: true
          YAML

          printf '%s\n' "✓ Created swe.yaml with local deployment"

          printf '%s\n' '--- 2b️⃣ Validating swe.yaml syntax ---'
          # First check basic YAML syntax
          python - << 'PY'
          import yaml, sys
          try:
              yaml.safe_load(open("swe.yaml"))
              print("✓ swe.yaml valid YAML syntax")
          except Exception as e:
              print("❌ swe.yaml syntax error detected. Please review the file format and indentation.")
              print(e)
              sys.exit(1)
          PY

          # Optional YAML debug output
          if [[ "$DEBUG" == "true" ]]; then
            echo "--- swe.yaml content preview ---"
            cat swe.yaml
            echo "---------------------------------"
          fi

          # Do a schema-only check if supported by sweagent CLI
          if sweagent --help | grep -q -- "--dry-run"; then
            printf '%s\n' "--- 2c️⃣ Performing schema validation with --dry-run ---"
            if ! sweagent run --config swe.yaml --dry-run; then
              printf '%s\n' "❌ Schema validation failed - config structure doesn't match SWE-agent v1.0.1 requirements"
              exit 1
            fi
            printf '%s\n' "✓ Schema validation passed"
          else
            printf '%s\n' "--- 2c️⃣ Skipping schema validation (--dry-run not supported) ---"
          fi

          printf '%s\n' '--- 3️⃣ Running SWE-Agent inside SWE-ReX ---'
          TS=$(date +%Y%m%dT%H%M%S)
          LOGFILE="run_${TS}.log"

          # Define the main command
          SWE_AGENT_CMD="sweagent run --config swe.yaml --output_dir ."
          if [[ "${DEBUG}" == "true" ]]; then
            SWE_AGENT_CMD="${SWE_AGENT_CMD} --verbose"
          fi

          set +e
          eval "$SWE_AGENT_CMD" 2>&1 | tee "$LOGFILE"
          ret=$?
          set -e

          printf '%s\n' "--- 🩺 Exit Code: $ret"
          if [ "$ret" -ne 0 ] || [ ! -s patch.tar ]; then
            # Always print the full sweagent log on failure
            printf '%s\n' "--- 📝 Full sweagent log contents ($LOGFILE) ---"
            cat "$LOGFILE"
            printf '%s\n' '❌ SWE-Agent run failed or patch missing'
            exit 1
          fi

          printf '%s\n' '✓ Agent produced patch.tar'
          printf '%s\n' '--- 4️⃣ Applying patch... ---'
          tar -xf patch.tar
          mapfile -d $'\0' patch_files < <(find . -maxdepth 1 -name '*.[pd][ia][ft]' -print0)

          if [ "${#patch_files[@]}" -eq 0 ]; then
            printf '%s\n' '❌ No patch files'
            exit 1
          fi

          for p in "${patch_files[@]}"; do
            [ -z "$p" ] && continue
            printf '%s\n' "→ validating $p"
            size=$(stat -c%s "$p")
            [ "$size" -lt 100000 ] || { printf '%s\n' "💥 $p too large"; exit 1; }

            git apply --stat "$p" > stat.txt
            loc_ins=$(grep -oP '(\d+)\s+insertions?' stat.txt | awk '{s+=$1} END{print s}')
            loc_del=$(grep -oP '(\d+)\s+deletions?' stat.txt | awk '{s+=$1} END{print s}')
            total=$((loc_ins+loc_del))
            [ "$total" -le 2000 ] || { printf '%s\n' "💥 patch $p changes $total LOC"; exit 1; }

            printf '%s\n' "Applying $p"
            git apply "$p" || { printf '%s\n' "❌ apply failed $p"; exit 1; }
          done

          if forge test -q; then
            printf '%s\n' '✓ tests green after patch'
          else
            printf '%s\n' '❌ tests still failing'
            exit 1
          fi

          printf '%s\n' '--- 5️⃣ Bundling evidence ---'
          mkdir -p .evidence
          # Handle potential missing slither.txt gracefully
          [ -f stat.txt ] && mv stat.txt .evidence/
          # slither.txt only if actually generated
          mv patch.tar "$LOGFILE" .evidence/
          TB="phase3_evidence_${TS}.tgz"
          tar -czf "$TB" .evidence
          # Move bundle to /tmp for upload
          mv "$TB" /tmp/
          echo "bundle_name=$TB" >> "$GITHUB_OUTPUT"
          printf '%s\n' "✅ Evidence: $TB"

      # 8) Upload Phase 3 Evidence Bundle
      - name: Upload Phase 3 Evidence
        uses: actions/upload-artifact@v4
        with:
          name: phase3-evidence
          path: /tmp/${{ steps.swe_agent_run_step.outputs.bundle_name }}
          if-no-files-found: error 