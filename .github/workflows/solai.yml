name: solai-phase2
on: [push]

jobs:
  smoke:
    runs-on: ubuntu-latest

    steps:
      # 1) Grab your code
      - uses: actions/checkout@v4

      # 2) Ensure Python 3.12
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Debug: Initial PATH state
      - name: Debug - Initial PATH
        run: |
          echo "Initial PATH: $PATH"
          echo "GITHUB_PATH content:"
          cat $GITHUB_PATH || echo "GITHUB_PATH not found"

      # 3) Install build tool + build your wheel
      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
      - name: Build wheel
        run: python -m build

      # 4) Install your wheel + AI backends via pip
      - name: Install solai wheel (with AI extras)
        run: |
          wheel=$(ls dist/solai-*.whl)
          echo "Installing wheel: $wheel"
          python -m pip install --upgrade pip
          python -m pip install "${wheel}[ai]"
          python -m pip install pipx

      # 4b) Install Foundry
      - name: Install Foundry
        run: |
          # Create foundry directories
          mkdir -p /home/runner/.foundry/bin
          
          # Download and execute foundryup installer
          curl -L https://foundry.paradigm.xyz | bash
          
          # Add foundry binary path to PATH
          export PATH="/home/runner/.foundry/bin:$PATH"
          
          # Download foundryup binary directly
          curl -L https://raw.githubusercontent.com/foundry-rs/foundry/master/foundryup/foundryup -o /home/runner/.foundry/bin/foundryup
          
          # Make it executable
          chmod +x /home/runner/.foundry/bin/foundryup
          
          # Now run foundryup to install Foundry
          /home/runner/.foundry/bin/foundryup
          
          # Debug: show installed Foundry binaries
          echo "🔍 Foundry bin contents:"
          ls -l /home/runner/.foundry/bin
          
          # Add to GitHub path for subsequent steps
          echo "/home/runner/.foundry/bin" >> $GITHUB_PATH
          
          # Debug: Verify Foundry installation
          echo "PATH after Foundry install: $PATH"
          echo "Testing forge directly:"
          /home/runner/.foundry/bin/forge --version

      # Debug: PATH after Foundry install
      - name: Debug - Post Foundry PATH
        run: |
          echo "PATH after Foundry setup: $PATH"
          echo "GITHUB_PATH content:"
          cat $GITHUB_PATH
          echo "Trying to locate forge:"
          which forge || echo "forge not found in PATH"
          ls -l /home/runner/.foundry/bin/

      # 5) Set up Docker so `solai doctor` will see it
      - name: Set up QEMU emulation
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx (brings in Docker CLI & daemon)
        uses: docker/setup-buildx-action@v3

      # Debug: PATH after Docker setup
      - name: Debug - Post Docker PATH
        run: |
          echo "PATH after Docker setup: $PATH"
          echo "GITHUB_PATH content:"
          cat $GITHUB_PATH
          echo "Trying to locate forge:"
          which forge || echo "forge not found in PATH"

      # 6) Verify environment with explicit PATH
      - name: solai doctor
        env:
          PATH: "/home/runner/.foundry/bin:$PATH"
        run: |
          echo "PATH in solai doctor step: $PATH"
          which forge || echo "forge not found in PATH"
          solai doctor

      # 7) Full end-to-end smoke test
      - name: Smoke test
        run: |
          set -e
          mkdir smoke && cd smoke
          git init .
          echo 'pragma solidity ^0.8.26; contract Y{}' > Y.sol
          cat > Y.t.sol << 'EOF'
          pragma solidity ^0.8.26; import "forge-std/Test.sol";
          contract T is Test {
            function testFail() public { assertTrue(false); }
          }
          EOF

          # init & bootstrap
          solai init
          make bootstrap-solai

          # run once
          solai run --once --max-concurrency 1 