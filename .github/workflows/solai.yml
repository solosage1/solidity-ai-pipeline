name: solai-phase3-hello-world
on: [push]

jobs:
  phase3_hello_world:
    runs-on: ubuntu-latest

    steps:
      # 1) Grab your code
      - uses: actions/checkout@v4

      # 2) Ensure Python 3.12
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Debug: Initial PATH state
      - name: Debug - Initial PATH
        run: |
          echo "Initial PATH: $PATH"
          echo "GITHUB_PATH content:"
          cat $GITHUB_PATH || echo "GITHUB_PATH not found"

      # 3) Install build tool + build your wheel
      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
      - name: Build wheel
        run: python -m build

      # 4) Install your wheel + AI backends via pip
      - name: Install solai wheel
        run: |
          wheel=$(ls dist/solai-*.whl)
          echo "Installing wheel: $wheel"
          python -m pip install --upgrade pip
          # Don't install [ai] extras since we're installing SWE-agent directly
          python -m pip install "${wheel}"
          python -m pip install pipx

      # 4a) Install Slither
      - name: Install Slither
        run: python -m pip install slither-analyzer

      # 4b) Install Foundry
      - name: Install Foundry
        run: |
          # 1) Create Foundry directories
          mkdir -p "$HOME/.foundry/bin"
          mkdir -p "$HOME/.config/.foundry/bin"
          # 2) Download foundryup
          curl -L https://raw.githubusercontent.com/foundry-rs/foundry/master/foundryup/foundryup -o "$HOME/.foundry/bin/foundryup"
          # 3) Make executable
          chmod +x "$HOME/.foundry/bin/foundryup"
          # 4) Add to temp PATH
          export PATH="$HOME/.foundry/bin:$PATH"
          # 5) Install full suite
          foundryup || echo "foundryup command failed with exit code $?"
          # 6) Verify
          ls -la "$HOME/.config/.foundry/bin/forge"
          # 7) Persist correct path
          echo "$HOME/.config/.foundry/bin" >> $GITHUB_PATH
          # 8) Verify again
          export PATH="$HOME/.config/.foundry/bin:$PATH"
          which forge
          forge --version

      # 4c) Install SWE-ReX (from source)
      - name: Install SWE-ReX
        run: |
          git clone https://github.com/SWE-agent/SWE-agent.git
          cd SWE-agent
          git checkout v1.0.1
          python -m pip install --upgrade pip
          # Install sweagent editable, forcing an older litellm version
          python -m pip install --editable ".[agent]" litellm==1.67.0
          cd ..
          which sweagent || echo "sweagent not found in PATH"

      # 5) Set up Docker
      - name: Set up QEMU emulation
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Debug: Post Docker PATH
      - name: Debug - Post Docker PATH
        run: |
          echo "PATH after Docker setup: $PATH"
          cat $GITHUB_PATH
          which forge || echo "forge not found in PATH"

      # 6) Build Phase 3 Required Docker Image
      - name: Build Phase 3 Docker Image
        run: |
          echo "--- Building Phase 3 Docker image ---"
          docker build -t foundry_sol:0.4.4 -f src/solai/docker/foundry_sol.Dockerfile .
          echo "--- Docker image build finished ---"
          docker images --format '{{.Repository}}:{{.Tag}}' | grep -q '^foundry_sol:0.4.4$' || { echo "‚ùå Failed to build or tag image correctly"; exit 1; }
          echo "‚úì Image foundry_sol:0.4.4 built successfully."

      # 7) Run Phase 3 Hello-World Test
      - name: Phase 3 - SWE-Agent Run
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional: If swerex-remote binary isn't found on default PATH
          # SWE_REX_BIN: /path/to/swerex-remote 
        run: |
          set -e
          echo "--- 1Ô∏è‚É£ Creating isolated failing demo repo ---"
          cd /tmp && rm -rf demo && mkdir demo && cd demo
          git init -q
          
          # Create contract
          cat > Greeter.sol << 'SOL'
          pragma solidity ^0.8.26;
          contract Greeter {
              string private greeting = "hello";
              function greet() external view returns (string memory) {
                  return greeting;
              }
          }
          SOL

          # Create test
          cat > Greeter.t.sol << 'SOLTEST'
          pragma solidity ^0.8.26;
          import "forge-std/Test.sol";
          import "./Greeter.sol";
          
          contract GreeterTest is Test {
              Greeter g;
              function setUp() public { g = new Greeter(); }
              /// @notice Wrong on purpose
              function testGreetingFails() public {
                  assertEq(g.greet(), "HELLO");
              }
          }
          SOLTEST

          forge test -q && { echo "‚ùå tests unexpectedly green"; exit 1; } || echo "‚úì baseline red"
          grep -q '"HELLO"' Greeter.t.sol || { echo "‚ùå 'HELLO' literal missing from test"; exit 1; }
          echo "‚úì Checkpoint 1 Passed"
          
          echo "--- 2Ô∏è‚É£ Authoring minimal swe.yaml ---"
          cat > swe.yaml << 'YAML'
          open_pr: false
          apply_patch_locally: true
          
          problem_statement:
            repo_path: .
            text: "Fix failing tests"
          
          agent:
            # model: gpt-4o-2024-05-13 # Using mini for cost-effectiveness
            # Use gpt-4o-mini for faster/cheaper runs if preferred
            model: gpt-4o-mini
            usd_cap: 0.20
          
          env:
            deployment:
              image: foundry_sol:0.4.4
          YAML

          # Validate YAML
          python -c 'import yaml, sys; yaml.safe_load(open("swe.yaml")); print("‚úì YAML valid")'
          echo "‚úì swe.yaml authored and validated"

          echo "--- 3Ô∏è‚É£ Running SWE-Agent inside SWE-ReX ---"
          TS=$(date +%Y%m%dT%H%M%S)
          LOGFILE="run_${TS}.log"
          
          # Ensure OpenAI key is set
          [[ -n "${OPENAI_API_KEY-}" ]] || { echo "‚ùå OPENAI_API_KEY is not set in env"; exit 1; }

          # Run swerex-remote
          # Use SWE_REX_BIN env var if defined, otherwise use sweagent directly
          echo "Running sweagent run --help to check arguments..."
          sweagent run --help || echo "sweagent run --help failed"
          echo "Attempting sweagent run..."
          ${SWE_REX_BIN:-sweagent} run --config swe.yaml --output-tar patch.tar \
            2>&1 | tee "$LOGFILE"
          
          # Basic sanity check for patch file
          [ -s patch.tar ] || { echo "‚ùå patch.tar missing or empty"; exit 1; }
          echo "‚úì Agent produced patch.tar"
          docker ps -a --format '{{.Image}}' | grep -q 'foundry_sol:0.4.4' || { echo "‚ùå Expected container image not found"; exit 1; }
          echo "‚úì Checkpoint 3 Passed"

          echo "--- 4Ô∏è‚É£ Applying patch, enforcing guard-rails, re-testing ---"
          tar -xf patch.tar
          patch_files=( *.diff *.patch )
          if [ "${#patch_files[@]}" -eq 0 ]; then
             echo "‚ùå No patch files (*.diff or *.patch) found in patch.tar"; 
             echo "--- Contents of current directory ---"
             ls -la
             echo "--- Log file ($LOGFILE) ---"
             cat "$LOGFILE"
             exit 1; 
          fi
          
          for p in "${patch_files[@]}"; do
            echo "‚Üí validating $p"
            # Check file size first (robust against missing file)
            size=$(stat -c%s "$p" 2>/dev/null || echo 0)
            [ "$size" -lt 100000 ] || { echo "üí• $p >100 KB (size: $size)"; exit 1; }
            
            # Check LoC and apply
            git apply --stat "$p" | tee stat.txt
            loc_inserted=$(grep -oP '(\d+)\s+insertions?' stat.txt | awk '{s+=$1} END{print s}')
            loc_deleted=$(grep -oP '(\d+)\s+deletions?' stat.txt | awk '{s+=$1} END{print s}')
            loc_total=$((loc_inserted + loc_deleted)) # Consider total change size
            [ "$loc_total" -le 2000 ] || { echo "üí• patch changes $loc_total LOC (inserted: $loc_inserted, deleted: $loc_deleted)"; exit 1; }
            
            echo "Applying patch $p..."
            git apply "$p" || { echo "‚ùå Failed to apply patch $p"; exit 1; }
            echo "‚úì Patch $p applied successfully."
          done
          
          forge test -q && echo "‚úì tests green after patch" || { echo "‚ùå tests still failing after patch"; exit 1; }
          
          # Run Slither
          echo "Running Slither scan..."
          slither . --exclude-dependencies --disable-color | tee slither.txt
          if grep -Eiq 'Severity.*(Critical|High)' slither.txt; then
            echo "‚ùå high-severity issue found by Slither"; exit 1; 
          else
            echo "‚úì Slither OK - No critical/high severity issues found."
          fi
          echo "‚úì Checkpoint 4 Passed"

          echo "--- 5Ô∏è‚É£ Bundling evidence ---"
          mkdir -p .evidence
          mv patch.tar "$LOGFILE" stat.txt slither.txt .evidence/
          EVIDENCE_BUNDLE="phase3_evidence_${TS}.tgz"
          tar -czf "$EVIDENCE_BUNDLE" .evidence
          sha256sum "$EVIDENCE_BUNDLE" > "evidence_${TS}.hash"
          echo "‚úÖ Evidence bundle ready: $EVIDENCE_BUNDLE"
          # Output bundle name for artifact upload step
          echo "EVIDENCE_BUNDLE_NAME=$EVIDENCE_BUNDLE" >> $GITHUB_ENV
          
          echo "--- 6Ô∏è‚É£ Cleanup ---"
          # Minimal cleanup within the job - runner handles workspace cleanup
          cd .. # Move out of /tmp/demo
          rm -rf demo # Clean up demo dir
          # swerex cleanup is usually handled outside the main flow
          # ${SWE_REX_BIN:-swerex-remote} clean 

      # 8) Upload Phase 3 Evidence Bundle
      - name: Upload Phase 3 Evidence
        uses: actions/upload-artifact@v4
        with:
          name: phase3-evidence
          path: /tmp/${{ env.EVIDENCE_BUNDLE_NAME }}
          if-no-files-found: error # Fail the workflow if the bundle isn't found 