diff --git a/.github/workflows/solai.yml b/.github/workflows/solai.yml
new file mode 100644
index 0000000..36230e6
--- /dev/null
+++ b/.github/workflows/solai.yml
@@ -0,0 +1,26 @@
+name: solai-phase2
+on: push
+jobs:
+  smoke:
+    runs-on: ubuntu-22.04
+    steps:
+      - uses: actions/checkout@v4
+      - uses: docker/setup-qemu-action@v3
+      - uses: docker/setup-buildx-action@v3
+      - name: Build wheel
+        run: python -m build
+      - name: Install solai
+        run: pipx install dist/*.whl
+      - name: Smoke test
+        run: |
+          mkdir smoke && cd smoke
+          git init .
+          echo 'pragma solidity ^0.8.26; contract Y{}' > Y.sol
+          cat > Y.t.sol << 'EOF'
+          pragma solidity ^0.8.26; import "forge-std/Test.sol"; contract T is Test {
+            function testFail() public { assertTrue(false); }
+          }
+          EOF
+          solai init
+          make bootstrap-solai
+          solai run --once --max-concurrency 1 
\ No newline at end of file
diff --git a/.solai.yaml b/.solai.yaml
new file mode 100644
index 0000000..ad7eb9e
--- /dev/null
+++ b/.solai.yaml
@@ -0,0 +1,18 @@
+agent:
+  model: gpt4o-2025-04-25      # pin to dated model
+  usd_cap: 5
+  repo_prompt: "Fix failing tests"
+
+env:
+  docker_image: "ghcr.io/yourorg/foundry_sol@sha256:placeholder_digest"
+  post_startup_cmds:
+    - ["forge", "test", "-q"]
+
+task:
+  branch: fix-demo
+  max_attempts: 1
+
+worktrees_dir: .solai/worktrees
+
+backlog:
+  file: backlog.yaml 
\ No newline at end of file
diff --git a/Makefile.inc b/Makefile.inc
new file mode 100644
index 0000000..2354ef5
--- /dev/null
+++ b/Makefile.inc
@@ -0,0 +1,11 @@
+# >>> solai autogenerated
+bootstrap-solai:
+	pipx ensurepath
+	@if command -v solai >/dev/null; \
+	    then pipx upgrade solai || true; \
+	    else pipx install solai; fi
+	solai doctor
+
+solai-run:
+	solai run
+# <<< solai 
\ No newline at end of file
diff --git a/README.md b/README.md
index 00217af..cfd6b18 100644
--- a/README.md
+++ b/README.md
@@ -5,13 +5,31 @@ Plug-and-play AI improvement pipeline for Solidity projects.
 ## Installation
 
 ```bash
+# Installs solai and swe-rex
 pipx install solai
+
+# SWE-Agent requires manual installation from source:
+git clone https://github.com/princeton-nlp/SWE-agent.git
+cd SWE-agent
+pip install -e .
+# Ensure the sweagent command is now in your PATH
 ```
 
+## SWE-ReX Authentication
+
+The SWE-ReX service uses API key authentication. When making requests to the service:
+
+1. The executable is named `swerex-remote` (not `swe-rex`)
+2. Authentication is done via the `X-API-Key` HTTP header
+3. The API key must be provided in the following ways:
+   - For HTTP requests: Include header `X-API-Key: your_api_key`
+   - For CLI usage: Use `swerex-remote --api-key your_api_key`
+   - For Python: Use headers dictionary `{"X-API-Key": "your_api_key"}`
+
 ## Quick Start
 
 ```bash
-# In your Solidity project directory:
+# In your Solidity project directory (after installing solai and SWE-Agent):
 solai init
 make bootstrap-solai
 make solai-run
@@ -23,7 +41,13 @@ make solai-run
 - Docker
 - Foundry
 - Slither
-- SWE-Agent and SWE-ReX
+- SWE-ReX (automatically installed with solai)
+- SWE-Agent (requires manual installation from source, see above)
+
+## Docker RAM Requirements
+
+**Docker RAM** – Foundry + SWE-Agent require ~6 GB.  
+Docker Desktop → Settings → Resources → Memory ≥ 6 GB.
 
 ## Implementation Details
 
diff --git a/gitignore_snip.txt b/gitignore_snip.txt
new file mode 100644
index 0000000..78dd5c0
--- /dev/null
+++ b/gitignore_snip.txt
@@ -0,0 +1,4 @@
+# >>> solai
+.solai/worktrees/
+.solai/logs/
+# <<< solai 
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 6bfb613..49e2198 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -4,7 +4,7 @@ build-backend = "hatchling.build"
 
 [project]
 name            = "solai"
-version         = "0.4.0"
+version         = "0.4.1"
 description     = "Plug-and-play AI improvement pipeline for Solidity projects"
 readme          = "README.md"
 requires-python = ">=3.12"
@@ -13,7 +13,8 @@ authors         = [{name = "SoloLabs"}]
 dependencies    = [
   "typer>=0.12",
   "rich>=13",
-  "pyyaml>=6"
+  "pyyaml>=6",
+  "swe-rex==1.2.1"
 ]
 
 [project.scripts]
diff --git a/src/solai/cli.py b/src/solai/cli.py
index cb02a10..cca6f8a 100644
--- a/src/solai/cli.py
+++ b/src/solai/cli.py
@@ -1,5 +1,5 @@
 from pathlib import Path
-import shutil, subprocess, platform, importlib.resources as pkg
+import shutil, subprocess, platform, importlib.resources as pkg, yaml
 import typer
 from solai.runner import run_backlog, doctor as run_doctor
 
@@ -31,13 +31,25 @@ def init(update: bool = typer.Option(False, "-u", "--update",
     
     typer.echo("✅  Run `make bootstrap-solai`")
 
+    # ---- placeholder digest warning ------------------------------------
+    cfg = Path(".solai.yaml")
+    if cfg.exists():
+        docker_image = yaml.safe_load(cfg.read_text())["env"]["docker_image"]
+        if "placeholder_digest" in docker_image:
+            typer.secho(
+                "⚠  .solai.yaml still has placeholder_digest — "
+                "run `solai image-rebuild` and update the file.",
+                fg="yellow")
+
 # ----- run ---------------------------------------------------
 @app.command()
 def run(config: Path = Path(".solai.yaml"),
-        once: bool = typer.Option(True, help="Exit after backlog drains"),
-        max_concurrency: int = typer.Option(4)):
+        once: bool = typer.Option(False, "--once/--watch",
+                                  help="Exit after one backlog pass"),
+        max_concurrency: int = typer.Option(4),
+        log_file: Path = typer.Option(".solai/logs/run.log")):
     """Run backlog tasks."""
-    run_backlog(config, once, max_concurrency)
+    run_backlog(config, once, max_concurrency, log_file)
 
 # ----- doctor -----------------------------------------------
 @app.command()
@@ -45,5 +57,11 @@ def doctor():
     """Environment self-test."""
     run_doctor()
 
+@app.command("image-rebuild")
+def image_rebuild():
+    """Rebuild & push foundry_sol image, update digest in .solai.yaml."""
+    from solai.runner import rebuild_image
+    rebuild_image()
+
 if __name__ == "__main__":
     app() 
\ No newline at end of file
diff --git a/src/solai/runner.py b/src/solai/runner.py
index ee69e89..ae4cdae 100644
--- a/src/solai/runner.py
+++ b/src/solai/runner.py
@@ -1,67 +1,140 @@
-import subprocess, sys, json, os, importlib
+import subprocess, sys, yaml, shutil, tempfile, platform, re, time, os, contextlib
 from pathlib import Path
 from concurrent.futures import ThreadPoolExecutor
 
-# ------------ doctor ----------------------------------------
-def _check(cmd: str, name: str):
-    try:
-        subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
-        print(f"✓ {name}")
-    except subprocess.CalledProcessError as e:
-        print(f"✗ {name} not found")
-        if "docker build" in cmd:
-            print("\nDocker build failed. Check:\n- Network connectivity\n- Docker daemon running\n- Build logs above")
-        sys.exit(1)
-
-def _check_python_package(package: str):
-    try:
-        importlib.import_module(package)
-        print(f"✓ {package} importable")
-    except ImportError:
-        print(f"✗ {package} not installed")
-        sys.exit(1)
-
-def image_present(tag: str) -> bool:
-    import json, subprocess
-    out = subprocess.check_output(f"docker images --format '{{{{json .}}}}' {tag}",
-                                  shell=True).decode().strip()
+# ── helpers ────────────────────────────────────────────────
+def _run(cmd, cwd, log):
+    """Run cmd streaming to console & optional log."""
+    p = subprocess.Popen(cmd, cwd=cwd, text=True,
+                         stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
+    for line in p.stdout:
+        print(line, end="")
+        if log: log.write(line)
+    p.wait()
+    if p.returncode:
+        raise subprocess.CalledProcessError(p.returncode, cmd)
+
+def image_present(digest: str) -> bool:
+    out = subprocess.check_output(
+        f"docker images --no-trunc --format '{{{{.Digest}}}}' {digest}",
+        shell=True, text=True).strip()
     return bool(out)
 
+# ── doctor ────────────────────────────────────────────────
 def doctor():
     if sys.version_info < (3, 12):
-        print("✗ Python 3.12+ required")
-        sys.exit(1)
-
-    # Basic CLI tools
-    checks = [
-        ("pipx --version", "pipx available"),
-        ("docker --version", "Docker CLI"),
-        ("docker info --format '{{.ServerVersion}}'", "Docker engine running"),
-        ("forge --version", "Foundry"),
-        ("slither --version", "Slither")
+        print("✗ Python 3.12+ required"); sys.exit(1)
+    if platform.system() == "Windows":
+        print("ℹ  Windows detected – run solai inside WSL2 for best results")
+
+    # Core checks (swe-rex is core, sweagent is not)
+    core_checks = [
+      ("pipx --version", "pipx available"),
+      ("docker --version", "Docker CLI"),
+      ("docker info --format '{{.ServerVersion}}'", "Docker engine"),
+      ("forge --version", "Foundry"),
+      ("slither --version", "Slither"),
+      ("swe-rex --version", "SWE-ReX")
     ]
-    for cmd, name in checks:
-        _check(cmd, name)
-
-    # Docker image
-    img = "foundry_sol"
-    tag = "0.4.0"
-    if not image_present(f"{img}:{tag}"):
-        dockerfile = str(Path(__file__).parent / "docker" / "foundry_sol.Dockerfile")
+    for cmd, name in core_checks:
         try:
-            subprocess.run(["docker", "build", "-t", f"{img}:{tag}", "-f", dockerfile, "."], check=True)
-        except subprocess.CalledProcessError as e:
-            print("\nDocker build failed. Check:\n- Network connectivity\n- Docker daemon running\n- Build logs above")
-            sys.exit(1)
+            subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
+            print(f"✓ {name}")
+        except (subprocess.CalledProcessError, FileNotFoundError):
+            print(f"✗ {name} check failed. Please ensure it's installed and in PATH."); sys.exit(1)
 
+    # Optional check for sweagent (needs manual source install)
+    try:
+        subprocess.check_output("sweagent --version", shell=True, stderr=subprocess.STDOUT)
+        print(f"✓ SWE-Agent")
+    except (subprocess.CalledProcessError, FileNotFoundError):
+        print(f"⚠ SWE-Agent missing. Install from source: git clone https://github.com/princeton-nlp/SWE-agent.git && cd SWE-agent && pip install -e .")
+
+    cfg = Path(".solai.yaml")
+    if cfg.exists():
+        digest = yaml.safe_load(cfg.read_text())["env"]["docker_image"]
+        if "placeholder_digest" in digest:
+            print("✗ .solai.yaml still contains placeholder_digest – run `solai image-rebuild`"); sys.exit(1)
+        if not image_present(digest):
+            print("✗ Image digest not present locally – pull or rebuild."); sys.exit(1)
+
+    print("ℹ  Ensure Docker Desktop memory ≥ 6 GB")
     print("🚀  doctor finished – environment ready")
 
-# ------------ backlog runner (placeholder) -------------------
-def run_backlog(config_path: Path, once: bool, max_concurrency: int):
-    if not config_path.exists():
-        print("Config", config_path, "not found"); sys.exit(1)
-    
-    with ThreadPoolExecutor(max_workers=max_concurrency) as executor:
-        print(f"⚙  Starting backlog runner with {max_concurrency} workers")
+# ── image rebuild helper ──────────────────────────────────
+def rebuild_image():
+    img_tag = "foundry_sol:0.4.1"
+    here = Path(__file__).parent / "docker" / "foundry_sol.Dockerfile"
+    subprocess.run(["docker", "build", "-t", img_tag, "-f", str(here), "."],
+                   check=True)
+    digest = subprocess.check_output(
+        f"docker inspect --format '{{{{index .RepoDigests 0}}}}' {img_tag}",
+        shell=True, text=True).strip()
+    subprocess.run(["docker", "push", digest], check=True)
+    print("✓ image pushed:", digest)
+    print("→ Update .solai.yaml with the new digest")
+
+# ── backlog runner ───────────────────────────────────────
+def run_backlog(cfg_path: Path, once: bool, max_conc: int, log_path: Path):
+    cfg = yaml.safe_load(cfg_path.read_text())
+    model = cfg["agent"]["model"]
+    if not re.match(r"[a-z0-9\-]+-\d{4}-\d{2}-\d{2}", model):
+        print("Model string must pin date (e.g., gpt4o-2025-04-25)"); return
+
+    def _worker():
+        with tempfile.TemporaryDirectory(prefix="solai-") as tmp, \
+             open(log_path, "a") as log:
+            repo_dir = Path(tmp) / "repo"
+            log_path.parent.mkdir(parents=True, exist_ok=True)
+            _run(["git", "clone", ".", repo_dir], Path("."), log)
+            _run(["git", "-C", repo_dir, "checkout", "-b", cfg["task"]["branch"]],
+                 Path("."), log)
+
+            # Write SWE-Agent config
+            (repo_dir / "swe.yaml").write_text(f"""
+open_pr: false
+apply_patch_locally: true
+problem_statement:
+  repo_path: .
+  text: "{cfg['agent']['repo_prompt']}"
+env:
+  deployment:
+    image: {cfg['env']['docker_image']}
+""")
+
+            # Run SWE-Agent inside swe-rex
+            _run(["swe-rex", "run", "--image", cfg["env"]["docker_image"],
+                  "--", "sweagent", "run", "--config", "swe.yaml",
+                  "--output-tar", "patch.tar"], repo_dir, log)
+
+            if not (repo_dir / "patch.tar").exists():
+                print("No patch produced"); return
+
+            _run(["tar", "-xf", "patch.tar", "-C", "."], repo_dir, log)
+            diff_files = list(repo_dir.glob("*.diff")) + list(repo_dir.glob("*.patch"))
+            if not diff_files:
+                print("No diff inside patch tar"); return
+            diff = diff_files[0]
+
+            stat = subprocess.check_output(
+                f"git apply --stat {diff}", shell=True, cwd=repo_dir, text=True)
+            m = re.search(r'(\d+) insertions?\(\+\), (\d+) deletions?\(-\)', stat)
+            ins = int(m.group(1)) if m else 0
+            dels = int(m.group(2)) if m else 0
+            loc = ins + dels
+            if loc == 0 or loc > 2000 or diff.stat().st_size > 100_000:
+                print("Patch size invalid"); return
+
+            _run(["git", "apply", str(diff)], repo_dir, log)
+            test_res = subprocess.run(["forge", "test", "-q"], cwd=repo_dir)
+            if test_res.returncode:
+                print("Tests still failing"); return
+
+            print(f"🎉  SWE-Agent applied {loc} LOC; tests green")
+
+    while True:
+        with ThreadPoolExecutor(max_workers=max_conc) as pool:
+            pool.submit(_worker).result()
         if once:
-            print("Will exit after backlog drains") 
\ No newline at end of file
+            break
+        time.sleep(30) 
\ No newline at end of file
diff --git a/src/solai/templates/dot_solai.yaml b/src/solai/templates/dot_solai.yaml
index b247b3d..ad7eb9e 100644
--- a/src/solai/templates/dot_solai.yaml
+++ b/src/solai/templates/dot_solai.yaml
@@ -1,9 +1,18 @@
 agent:
-  model: gpt4o
+  model: gpt4o-2025-04-25      # pin to dated model
   usd_cap: 5
+  repo_prompt: "Fix failing tests"
+
 env:
-  docker_image: foundry_sol:0.4.0
-  post_startup_cmds: ["forge test -q"]
+  docker_image: "ghcr.io/yourorg/foundry_sol@sha256:placeholder_digest"
+  post_startup_cmds:
+    - ["forge", "test", "-q"]
+
+task:
+  branch: fix-demo
+  max_attempts: 1
+
+worktrees_dir: .solai/worktrees
+
 backlog:
-  file: backlog.yaml
-worktrees_dir: .solai/worktrees 
\ No newline at end of file
+  file: backlog.yaml 
\ No newline at end of file
diff --git a/temp_diff b/temp_diff
new file mode 100644
index 0000000..725e7e5
--- /dev/null
+++ b/temp_diff
@@ -0,0 +1,281 @@
+diff --git a/README.md b/README.md
+index 00217af..a38f710 100644
+--- a/README.md
++++ b/README.md
+@@ -25,6 +25,11 @@ make solai-run
+ - Slither
+ - SWE-Agent and SWE-ReX
+ 
++## Docker RAM Requirements
++
++**Docker RAM** – Foundry + SWE-Agent require ~6 GB.  
++Docker Desktop → Settings → Resources → Memory ≥ 6 GB.
++
+ ## Implementation Details
+ 
+ For a detailed summary of the Phase 1 implementation (v0.4.0), please refer to the document in the specs directory:
+diff --git a/pyproject.toml b/pyproject.toml
+index 6bfb613..276f07a 100644
+--- a/pyproject.toml
++++ b/pyproject.toml
+@@ -4,7 +4,7 @@ build-backend = "hatchling.build"
+ 
+ [project]
+ name            = "solai"
+-version         = "0.4.0"
++version         = "0.4.1"
+ description     = "Plug-and-play AI improvement pipeline for Solidity projects"
+ readme          = "README.md"
+ requires-python = ">=3.12"
+@@ -13,7 +13,9 @@ authors         = [{name = "SoloLabs"}]
+ dependencies    = [
+   "typer>=0.12",
+   "rich>=13",
+-  "pyyaml>=6"
++  "pyyaml>=6",
++  "sweagent>=1.0.0",
++  "swe-rex>=1.0.0"
+ ]
+ 
+ [project.scripts]
+diff --git a/src/solai/cli.py b/src/solai/cli.py
+index cb02a10..b20805e 100644
+--- a/src/solai/cli.py
++++ b/src/solai/cli.py
+@@ -34,10 +34,12 @@ def init(update: bool = typer.Option(False, "-u", "--update",
+ # ----- run ---------------------------------------------------
+ @app.command()
+ def run(config: Path = Path(".solai.yaml"),
+-        once: bool = typer.Option(True, help="Exit after backlog drains"),
+-        max_concurrency: int = typer.Option(4)):
++        once: bool = typer.Option(False, "--once/--watch",
++                                  help="Exit after one backlog pass"),
++        max_concurrency: int = typer.Option(4),
++        log_file: Path = typer.Option(".solai/logs/run.log")):
+     """Run backlog tasks."""
+-    run_backlog(config, once, max_concurrency)
++    run_backlog(config, once, max_concurrency, log_file)
+ 
+ # ----- doctor -----------------------------------------------
+ @app.command()
+@@ -45,5 +47,11 @@ def doctor():
+     """Environment self-test."""
+     run_doctor()
+ 
++@app.command("image-rebuild")
++def image_rebuild():
++    """Rebuild & push foundry_sol image, update digest in .solai.yaml."""
++    from solai.runner import rebuild_image
++    rebuild_image()
++
+ if __name__ == "__main__":
+     app() 
+\ No newline at end of file
+diff --git a/src/solai/runner.py b/src/solai/runner.py
+index ee69e89..0c32ab3 100644
+--- a/src/solai/runner.py
++++ b/src/solai/runner.py
+@@ -1,67 +1,119 @@
+-import subprocess, sys, json, os, importlib
++import subprocess, sys, yaml, shutil, tempfile, platform, re, time, os, contextlib
+ from pathlib import Path
+ from concurrent.futures import ThreadPoolExecutor
+ 
+-# ------------ doctor ----------------------------------------
+-def _check(cmd: str, name: str):
+-    try:
+-        subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
+-        print(f"✓ {name}")
+-    except subprocess.CalledProcessError as e:
+-        print(f"✗ {name} not found")
+-        if "docker build" in cmd:
+-            print("\nDocker build failed. Check:\n- Network connectivity\n- Docker daemon running\n- Build logs above")
+-        sys.exit(1)
+-
+-def _check_python_package(package: str):
+-    try:
+-        importlib.import_module(package)
+-        print(f"✓ {package} importable")
+-    except ImportError:
+-        print(f"✗ {package} not installed")
+-        sys.exit(1)
+-
+-def image_present(tag: str) -> bool:
+-    import json, subprocess
+-    out = subprocess.check_output(f"docker images --format '{{{{json .}}}}' {tag}",
+-                                  shell=True).decode().strip()
++# ── helpers ────────────────────────────────────────────────
++def _run(cmd, cwd, log):
++    """Run cmd streaming to console & optional log."""
++    p = subprocess.Popen(cmd, cwd=cwd, text=True,
++                         stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
++    for line in p.stdout:
++        print(line, end="")
++        if log: log.write(line)
++    p.wait()
++    if p.returncode:
++        raise subprocess.CalledProcessError(p.returncode, cmd)
++
++def image_present(digest: str) -> bool:
++    out = subprocess.check_output(
++        f"docker images --no-trunc --format '{{{{.Digest}}}}' {digest}",
++        shell=True, text=True).strip()
+     return bool(out)
+ 
++# ── doctor ────────────────────────────────────────────────
+ def doctor():
+     if sys.version_info < (3, 12):
+-        print("✗ Python 3.12+ required")
+-        sys.exit(1)
++        print("✗ Python 3.12+ required"); sys.exit(1)
++    if platform.system() == "Windows":
++        print("ℹ  Windows detected – run solai inside WSL2 for best results")
+ 
+-    # Basic CLI tools
+     checks = [
+-        ("pipx --version", "pipx available"),
+-        ("docker --version", "Docker CLI"),
+-        ("docker info --format '{{.ServerVersion}}'", "Docker engine running"),
+-        ("forge --version", "Foundry"),
+-        ("slither --version", "Slither")
++      ("pipx --version", "pipx available"),
++      ("docker --version", "Docker CLI"),
++      ("docker info --format '{{.ServerVersion}}'", "Docker engine"),
++      ("forge --version", "Foundry"),
++      ("slither --version", "Slither"),
++      ("sweagent --version", "SWE-Agent"),
++      ("swe-rex --version", "SWE-ReX"),
+     ]
+     for cmd, name in checks:
+-        _check(cmd, name)
+-
+-    # Docker image
+-    img = "foundry_sol"
+-    tag = "0.4.0"
+-    if not image_present(f"{img}:{tag}"):
+-        dockerfile = str(Path(__file__).parent / "docker" / "foundry_sol.Dockerfile")
+-        try:
+-            subprocess.run(["docker", "build", "-t", f"{img}:{tag}", "-f", dockerfile, "."], check=True)
+-        except subprocess.CalledProcessError as e:
+-            print("\nDocker build failed. Check:\n- Network connectivity\n- Docker daemon running\n- Build logs above")
+-            sys.exit(1)
++        subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
++        print(f"✓ {name}")
++
++    cfg = Path(".solai.yaml")
++    if cfg.exists():
++        digest = yaml.safe_load(cfg.read_text())["env"]["docker_image"]
++        if not image_present(digest):
++            print("✗ Image digest missing – run `solai image-rebuild`"); sys.exit(1)
+ 
+     print("🚀  doctor finished – environment ready")
+ 
+-# ------------ backlog runner (placeholder) -------------------
+-def run_backlog(config_path: Path, once: bool, max_concurrency: int):
+-    if not config_path.exists():
+-        print("Config", config_path, "not found"); sys.exit(1)
+-    
+-    with ThreadPoolExecutor(max_workers=max_concurrency) as executor:
+-        print(f"⚙  Starting backlog runner with {max_concurrency} workers")
++# ── image rebuild helper ──────────────────────────────────
++def rebuild_image():
++    img_tag = "foundry_sol:0.4.1"
++    here = Path(__file__).parent / "docker" / "foundry_sol.Dockerfile"
++    subprocess.run(["docker", "build", "-t", img_tag, "-f", str(here), "."],
++                   check=True)
++    digest = subprocess.check_output(
++        f"docker inspect --format '{{{{index .RepoDigests 0}}}}' {img_tag}",
++        shell=True, text=True).strip()
++    subprocess.run(["docker", "push", digest], check=True)
++    print("✓ image pushed:", digest)
++    print("→ Update .solai.yaml with the new digest")
++
++# ── backlog runner ───────────────────────────────────────
++def run_backlog(cfg_path: Path, once: bool, max_conc: int, log_path: Path):
++    cfg = yaml.safe_load(cfg_path.read_text())
++    model = cfg["agent"]["model"]
++    if not re.match(r"[a-z0-9\-]+-\d{4}-\d{2}-\d{2}", model):
++        print("Model string must pin date (e.g., gpt4o-2025-04-25)"); return
++
++    def _worker():
++        with tempfile.TemporaryDirectory(prefix="solai-") as tmp, \
++             open(log_path, "a") as log:
++            repo_dir = Path(tmp) / "repo"
++            _run(["git", "clone", ".", repo_dir], Path("."), log)
++            _run(["git", "-C", repo_dir, "checkout", "-b", cfg["task"]["branch"]],
++                 Path("."), log)
++
++            # Write SWE-Agent config
++            (repo_dir / "swe.yaml").write_text(f"""
++open_pr: false
++apply_patch_locally: true
++problem_statement:
++  repo_path: .
++  text: "{cfg['agent']['repo_prompt']}"
++env:
++  deployment:
++    image: {cfg['env']['docker_image']}
++""")
++
++            # Run SWE-Agent inside swe-rex
++            _run(["swe-rex", "run", "--image", cfg["env"]["docker_image"],
++                  "--", "sweagent", "run", "--config", "swe.yaml",
++                  "--output-tar", "patch.tar"], repo_dir, log)
++
++            if not (repo_dir / "patch.tar").exists():
++                print("No patch produced"); return
++
++            _run(["tar", "-xf", "patch.tar", "-C", "."], repo_dir, log)
++            diff = next(repo_dir.glob("*.diff"))
++            stat = subprocess.check_output(f"git apply --stat {diff}", shell=True,
++                                           cwd=repo_dir, text=True)
++            loc = sum(map(int, re.findall(r'(\d+) insert', stat)))
++            if loc == 0 or loc > 2000:
++                print("Patch size invalid"); return
++
++            _run(["git", "apply", str(diff)], repo_dir, log)
++            test_res = subprocess.run(["forge", "test", "-q"], cwd=repo_dir)
++            if test_res.returncode:
++                print("Tests still failing"); return
++
++            print(f"🎉  SWE-Agent applied {loc} LOC; tests green")
++
++    while True:
++        with ThreadPoolExecutor(max_workers=max_conc) as pool:
++            pool.submit(_worker).result()
+         if once:
+-            print("Will exit after backlog drains") 
+\ No newline at end of file
++            break
++        time.sleep(30) 
+\ No newline at end of file
+diff --git a/src/solai/templates/dot_solai.yaml b/src/solai/templates/dot_solai.yaml
+index b247b3d..ad7eb9e 100644
+--- a/src/solai/templates/dot_solai.yaml
++++ b/src/solai/templates/dot_solai.yaml
+@@ -1,9 +1,18 @@
+ agent:
+-  model: gpt4o
++  model: gpt4o-2025-04-25      # pin to dated model
+   usd_cap: 5
++  repo_prompt: "Fix failing tests"
++
+ env:
+-  docker_image: foundry_sol:0.4.0
+-  post_startup_cmds: ["forge test -q"]
++  docker_image: "ghcr.io/yourorg/foundry_sol@sha256:placeholder_digest"
++  post_startup_cmds:
++    - ["forge", "test", "-q"]
++
++task:
++  branch: fix-demo
++  max_attempts: 1
++
++worktrees_dir: .solai/worktrees
++
+ backlog:
+-  file: backlog.yaml
+-worktrees_dir: .solai/worktrees 
+\ No newline at end of file
++  file: backlog.yaml 
+\ No newline at end of file
diff --git a/temp_diff2 b/temp_diff2
new file mode 100644
index 0000000..e69de29
